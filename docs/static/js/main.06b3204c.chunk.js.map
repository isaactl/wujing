{"version":3,"sources":["components/diff/editor.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","appBar","position","title","marginLeft","spacing","flex","options","selectOnLineNumbers","automaticLayout","fontSize","originalEditable","DiffEditor","props","classes","monacoRef","useRef","onCancel","Dialog","fullScreen","open","onClose","AppBar","className","Toolbar","IconButton","edge","color","onClick","aria-label","Typography","variant","width","height","language","ref","original","value","onChange","newValue","e","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAUMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,OAAQ,CACJC,SAAU,YAEdC,MAAO,CACHC,WAAYJ,EAAMK,QAAQ,GAC1BC,KAAM,OAIRC,EAAU,CACZC,qBAAqB,EACrBC,iBAAiB,EACjBC,SAAU,OACVC,kBAAkB,GAIP,SAASC,EAAWC,GAC/B,IAAMC,EAAUhB,IACViB,EAAYC,iBAAO,MAKzB,SAASC,KAST,OACI,kBAACC,EAAA,EAAD,CAAQC,YAAU,EAACC,KAAMP,EAAMO,KAAMC,QAASJ,GAC1C,kBAACK,EAAA,EAAD,CAAQC,UAAWT,EAAQb,QACvB,kBAACuB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,QAASX,EAAUY,aAAW,SACnE,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKR,UAAWT,EAAQX,OAA5C,mBAKR,kBAAC,mBAAD,CACI6B,MAAM,OACNC,OAAO,OACPC,SAAS,OACTlC,MAAM,UACNmC,IAAKpB,EACLqB,SAAS,GACTC,MAAM,GACN9B,QAASA,EACT+B,SAjCZ,SAAsBC,EAAUC,QCfrBC,MAbf,WACE,OACE,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,cAChB,mCACO,4CADP,wBAGA,kBAACX,EAAD,CAAYQ,MAAM,OCCNsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.06b3204c.chunk.js","sourcesContent":["import React, {useRef} from 'react'\nimport {MonacoDiffEditor} from 'react-monaco-editor'\nimport {Dialog} from \"@material-ui/core\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles(theme => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n}));\n\nconst options = {\n    selectOnLineNumbers: true,\n    automaticLayout: false,\n    fontSize: '18px',\n    originalEditable: true,\n    // readOnly: !props.editable\n}\n\nexport default function DiffEditor(props) {\n    const classes = useStyles()\n    const monacoRef = useRef(null)\n\n    function handleChange(newValue, e) {\n    }\n\n    function onCancel() {\n    }\n\n    // // https://github.com/react-monaco-editor/react-monaco-editor/blob/master/src/diff.js#L19\n    // function onSave() {\n    //     const {modified} = monacoRef.current.editor.getModel()\n    //     console.log(modified.getValue())\n    // }\n\n    return (\n        <Dialog fullScreen open={props.open} onClose={onCancel}>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={onCancel} aria-label=\"close\">\n                        <CloseIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Differ Viewer\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <MonacoDiffEditor\n                width=\"100%\"\n                height=\"100%\"\n                language=\"yaml\"\n                theme=\"vs-dark\"\n                ref={monacoRef}\n                original=\"\"\n                value=\"\"\n                options={options}\n                onChange={handleChange}\n            />\n        </Dialog>\n    );\n}","import React from 'react';\nimport './App.css';\nimport DiffEditor from './components/diff/editor'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <DiffEditor open={true}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}